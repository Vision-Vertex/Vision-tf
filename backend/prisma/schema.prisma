generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User and related models
model User {
  id                       String               @id @default(uuid())
  firstname                String
  middlename               String?
  lastname                 String
  username                 String               @unique
  email                    String               @unique
  password                 String
  isEmailVerified          Boolean              @default(false)
  role                     UserRole             @default(CLIENT)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  isDeleted                Boolean              @default(false)
  deletedAt                DateTime?
  lastLoginAt              DateTime?
  failedLoginAttempts      Int                  @default(0)
  twoFactorEnabled         Boolean              @default(false)
  twoFactorSecret          String?
  preferredLanguage        String?
  timezone                 String?
  accountLockedUntil       DateTime?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  passwordResetExpires     DateTime?
  passwordResetToken       String?
  twoFactorBackupCodes     String[]             @default([])
  auditLogs                AuditLog[]
  authProviders            AuthProvider[]
  profile                  Profile?
  refreshTokens            RefreshToken[]
  sessions                 Session[]
  suspiciousActivities     SuspiciousActivity[]
  loginPatterns            UserLoginPattern[]
  invitationsCreated       Invitation[] @relation("InvitationCreator")
  invitationsUsed          Invitation[] @relation("InvitationUser")
  
  // Job-related relations
  clientJobs               Job[]                @relation("ClientJobs")
  jobEvents                JobEvent[]           @relation("UserJobEvents")
  jobStatusChanges         JobStatusHistory[]   @relation("UserJobStatusChanges")
  developerAssignments JobAssignment[] @relation("DeveloperAssignments")
  assignerAssignments  JobAssignment[] @relation("AssignerAssignments")
  teamMemberships   TeamMember[]      
  teamAssignments   TeamAssignment[]
  assignmentStatusChanges AssignmentStatusHistory[]
  teamAssignmentStatusChanges TeamAssignmentStatusHistory[]
  
  // Budget-related relations
  budgetsCreated           Budget[]             @relation("BudgetCreator")
  budgetsApproved          Budget[]             @relation("BudgetApprover")
  milestonesCompleted       Milestone[]          @relation("MilestoneCompleter")
  paymentsProcessed         Payment[]            @relation("PaymentProcessor")
  exchangeRatesCreated      ExchangeRate[]       @relation("ExchangeRateCreator")
  
  // Scoring relations
  developerPerformanceMetric DeveloperPerformanceMetric?
  assignmentScores  AssignmentScore[]
  scoringRuns       ScoringRun[] @relation("UserScoringRuns")
}


model Profile {
  id                 String    @id @default(uuid())
  userId             String    @unique
  displayName        String?
  bio                String?
  profilePictureUrl  String?
  chatLastReadAt     DateTime?
  skills             String[]
  experience         Int?
  availability       Json?
  companyName        String?
  companyWebsite     String?
  adminPreferences   Json?
  companyDescription String?
  companySize        String?
  contactEmail       String?
  contactPerson      String?
  contactPhone       String?
  createdAt          DateTime  @default(now())
  currency           String?   @default("USD")
  education          Json?
  hourlyRate         Float?
  industry           String?
  lastSystemAccess   DateTime?
  location           Json?
  permissions        String[]
  projectPreferences Json?
  socialLinks        Json?
  systemRole         String?
  updatedAt          DateTime  @updatedAt
  workPreferences    Json?
  portfolioLinks     Json?
  billingAddress     Json?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id          String    @id @default(uuid())
  email       String    // Email of invited user
  code        String    @unique // Unique invitation code
  role        UserRole  // Role being invited for
  maxUses     Int       @default(1) // How many times can be used
  usedCount   Int       @default(0) // How many times used
  expiresAt   DateTime  // When invitation expires
  createdBy   String    // Admin who created invitation
  createdAt   DateTime  @default(now())
  used        Boolean   @default(false) // Has been used
  usedAt      DateTime? // When was used
  usedBy      String?   // User ID who used it
  
  // Relations
  creator     User      @relation("InvitationCreator", fields: [createdBy], references: [id])
  user        User?     @relation("InvitationUser", fields: [usedBy], references: [id])

  @@index([email])
  @@index([code])
  @@index([role])
  @@index([expiresAt])
  @@index([createdBy])
  @@index([used])
}

model AuthProvider {
  id             String   @id @default(uuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  profileEmail   String?
  linkedAt       DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
model Session {
  id                String   @id @default(uuid())
  userId            String
  sessionToken      String   @unique
  expiresAt         DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  lastActivityAt    DateTime @default(now())
  userAgent         String?
  ipAddress         String?
  deviceName        String?
  rememberMe        Boolean  @default(false)
  deviceFingerprint String?
  isIncognito       Boolean  @default(false)
  language          String?
  screenResolution  String?
  timezone          String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId, isActive])
  @@index([userId, deviceFingerprint])
  @@index([expiresAt, isActive])
}

model AuditLog {
  id               String             @id @default(uuid())
  userId           String?
  eventType        AuditEventType
  eventCategory    AuditEventCategory
  description      String
  details          Json?
  ipAddress        String?
  userAgent        String?
  sessionToken     String?
  severity         AuditSeverity      @default(INFO)
  source           String             @default("auth-system")
  createdAt        DateTime           @default(now())
  targetUserId     String?
  targetResource   String?
  targetResourceId String?
  jobId            String?            // Reference to Job if this audit log is job-related
  user             User?              @relation(fields: [userId], references: [id])
  job              Job?               @relation(fields: [jobId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([eventCategory])
  @@index([severity])
  @@index([createdAt])
  @@index([source])
  @@index([jobId])
}

model SuspiciousActivity {
  id                String                     @id @default(uuid())
  userId            String?
  activityType      SuspiciousActivityType
  severity          SuspiciousActivitySeverity
  description       String
  details           Json?
  ipAddress         String?
  userAgent         String?
  location          String?
  deviceFingerprint String?
  riskScore         Int                        @default(0)
  confidence        Float                      @default(0.0)
  status            SuspiciousActivityStatus   @default(DETECTED)
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewNotes       String?
  detectedAt        DateTime                   @default(now())
  createdAt         DateTime                   @default(now())
  relatedAuditLogs  String[]
  user              User?                      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([activityType])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
  @@index([riskScore])
}

model UserLoginPattern {
  id                String   @id @default(uuid())
  userId            String
  ipAddress         String
  userAgent         String
  location          String?
  deviceFingerprint String?
  loginCount        Int      @default(1)
  firstSeenAt       DateTime @default(now())
  lastSeenAt        DateTime @default(now())
  isSuspicious      Boolean  @default(false)
  riskFactors       String[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ipAddress, userAgent])
  @@index([userId])
  @@index([ipAddress])
  @@index([isSuspicious])
}

model Job {
  id                String           @id @default(uuid())
  title             String
  description       String
  deadline          DateTime
  clientId          String
  status            JobStatus        @default(DRAFT)
  

  // Skills structure: [{"skill": "React", "level": "EXPERT", "weight": 1.0}]
  requiredSkills    Json?            
  // Skills structure: [{"skill": "TypeScript", "level": "INTERMEDIATE", "weight": 0.5}]
  preferredSkills   Json?            
  // Budget structure: {"type": "FIXED"|"HOURLY"|"MILESTONE", "amount": 5000, "currency": "USD", "milestones": [...]}
  budget            Json?            
  estimatedHours    Int?
  priority          JobPriority      @default(MEDIUM)
  projectType       ProjectType?
  location          WorkLocation     @default(REMOTE)
  attachments       String[]         @default([])
  tags              String[]         @default([])
  visibility        JobVisibility    @default(PUBLIC)
  
  // Additional fields for comprehensive management
  requirements      String?          
  deliverables      String[]         @default([]) 
  constraints       String?         
  riskFactors       String[]         @default([]) 
  
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  publishedAt       DateTime?
  approvedAt        DateTime?
  onHoldAt          DateTime?
  cancelledAt       DateTime?
  completedAt       DateTime?
  expiredAt         DateTime?
  
  // Audit and tracking
  version           Int              @default(1)
  lastModifiedBy    String?
  statusChangedAt   DateTime?
  previousStatus    JobStatus?
  
  // Relations
  client            User             @relation("ClientJobs", fields: [clientId], references: [id])
  auditLogs         AuditLog[]
  jobEvents         JobEvent[]
  jobHistory        JobStatusHistory[]
  assignments     JobAssignment[]
  teamAssignments   TeamAssignment[]
  
  // Budget relation (new)
  budgetRecord      Budget?
  
  // Scoring relations
  scoringRuns      ScoringRun[]
  assignmentScores AssignmentScore[]
  
  @@index([clientId])
  @@index([status])
  @@index([priority])
  @@index([projectType])
  @@index([location])
  @@index([visibility])
  @@index([deadline])
  @@index([createdAt])
  @@index([publishedAt])
  @@index([status, visibility])
  @@index([clientId, status])
}

model JobEvent {
  id                String           @id @default(uuid())
  jobId             String
  eventType         JobEventType
  eventData         Json?
  userId            String?
  userAgent         String?
  ipAddress         String?
  timestamp         DateTime         @default(now())
  metadata          Json?
  
  // Relations
  job               Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user              User?             @relation("UserJobEvents", fields: [userId], references: [id])
  
  @@index([jobId])
  @@index([eventType])
  @@index([timestamp])
  @@index([userId])
}

model JobStatusHistory {
  id                String           @id @default(uuid())
  jobId             String
  fromStatus        JobStatus?
  toStatus          JobStatus
  changedBy         String?
  changeReason      String?
  timestamp         DateTime         @default(now())
  metadata          Json?
  
  // Relations
  job               Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user              User?             @relation("UserJobStatusChanges", fields: [changedBy], references: [id])
  
  @@index([jobId])
  @@index([toStatus])
  @@index([timestamp])
  @@index([changedBy])
}

enum UserRole {
  CLIENT
  DEVELOPER
  ADMIN
}

enum SuspiciousActivityType {
  UNUSUAL_LOGIN_TIME
  UNUSUAL_LOCATION
  UNUSUAL_DEVICE
  RAPID_LOGIN_ATTEMPTS
  CONCURRENT_LOGINS
  PASSWORD_SPRAY_ATTACK
  BRUTE_FORCE_ATTACK
  ACCOUNT_TAKEOVER_ATTEMPT
  SUSPICIOUS_ROLE_CHANGE
  SESSION_HIJACKING_ATTEMPT
  UNUSUAL_SESSION_ACTIVITY
  MULTIPLE_FAILED_SESSIONS
  RATE_LIMIT_VIOLATION
  API_ABUSE
  DATA_EXFILTRATION_ATTEMPT
}

enum SuspiciousActivitySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SuspiciousActivityStatus {
  DETECTED
  INVESTIGATING
  FALSE_POSITIVE
  CONFIRMED_THREAT
  RESOLVED
}
enum AuditEventType {
  USER_LOGIN
  USER_LOGOUT
  LOGIN_FAILED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  USER_REGISTERED
  EMAIL_VERIFIED
  EMAIL_VERIFICATION_SENT
  PASSWORD_CHANGED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  TWO_FACTOR_SETUP
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_VERIFICATION_FAILED
  SESSION_CREATED
  SESSION_TERMINATED
  SESSION_EXPIRED
  ALL_SESSIONS_TERMINATED
  USER_ROLE_CHANGED
  USER_DEACTIVATED
  USER_ACTIVATED
  USER_DELETED
  PROFILE_UPDATED
  PROFILE_VIEWED
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  UNAUTHORIZED_ACCESS
  SYSTEM_ERROR
  CONFIGURATION_CHANGED
  MAINTENANCE_MODE
}

enum AuditEventCategory {
  AUTHENTICATION
  AUTHORIZATION
  USER_MANAGEMENT
  SECURITY
  SYSTEM
  PROFILE
  SESSION
}

enum AuditSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum JobStatus {
  DRAFT
  PENDING
  APPROVED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
  ON_HOLD
  UNDER_REVIEW
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum ProjectType {
  WEB_APP
  MOBILE_APP
  API
  DESIGN
  DATABASE
  DEVOPS
  AI_ML
  BLOCKCHAIN
  GAME_DEVELOPMENT
  ECOMMERCE
  CMS
  INTEGRATION
  MIGRATION
  MAINTENANCE
  CONSULTING
  RESEARCH
  TESTING
  DOCUMENTATION
  TRAINING
  OTHER
}

enum WorkLocation {
  REMOTE
  ONSITE
  HYBRID
  FLEXIBLE
}

enum JobVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
  INTERNAL
}

enum JobEventType {
  JOB_CREATED
  JOB_UPDATED
  JOB_DELETED
  STATUS_CHANGED
  PRIORITY_CHANGED
  DEADLINE_UPDATED
  BUDGET_UPDATED
  REQUIREMENTS_UPDATED
  JOB_PUBLISHED
  JOB_APPROVED
  JOB_ON_HOLD
  JOB_CANCELLED
  JOB_COMPLETED
  JOB_EXPIRED
  JOB_ARCHIVED
  JOB_VIEWED
  JOB_SHARED
  JOB_BOOKMARKED
}
model JobAssignment {
  id              String   @id @default(uuid())
  jobId           String   
  developerId     String   
  assignedBy      String   
  assignmentType  String   
  assignedAt      DateTime @default(now())
  status          AssignmentStatus @default(PENDING)
  notes           String?

  // Relations
  job             Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  developer       User     @relation("DeveloperAssignments", fields: [developerId], references: [id], onDelete: Cascade)
  assignedByUser  User     @relation("AssignerAssignments", fields: [assignedBy], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Status history relation
  statusHistory   AssignmentStatusHistory[]
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}
model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  members     TeamMember[]
  assignments TeamAssignment[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER) // DEV, LEAD, etc.
  joinedAt  DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model TeamAssignment {
  id        String           @id @default(uuid())
  jobId     String
  teamId    String
  status    AssignmentStatus @default(PENDING)
  notes     String?
  assignedAt DateTime        @default(now())
  assignedBy String

  job        Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  team       Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignedByUser User @relation(fields: [assignedBy], references: [id], onDelete: Cascade)

  // Status history relation
  statusHistory   TeamAssignmentStatusHistory[]
}

enum TeamRole {
  LEAD
  MEMBER
  REVIEWER
}


// Status History Models for Audit Trail
model AssignmentStatusHistory {
  id                String           @id @default(uuid())
  assignmentId      String           // Reference to JobAssignment
  previousStatus    AssignmentStatus?
  newStatus         AssignmentStatus
  changedBy         String           // User ID who made the change
  changedAt         DateTime         @default(now())
  reason            String?          // Optional reason for the change
  notes             String?          // Additional notes
  ipAddress         String?          // IP address of the user
  userAgent         String?          // User agent/browser info
  metadata          Json?            // Additional metadata (e.g., automation trigger, bulk update, etc.)

  // Relations
  assignment        JobAssignment    @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  changedByUser     User             @relation(fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([changedAt])
  @@index([changedBy])
}

model TeamAssignmentStatusHistory {
  id                String           @id @default(uuid())
  teamAssignmentId  String           // Reference to TeamAssignment
  previousStatus    AssignmentStatus?
  newStatus         AssignmentStatus
  changedBy         String           // User ID who made the change
  changedAt         DateTime         @default(now())
  reason            String?          // Optional reason for the change
  notes             String?          // Additional notes
  ipAddress         String?          // IP address of the user
  userAgent         String?          // User agent/browser info
  metadata          Json?            // Additional metadata

  // Relations
  teamAssignment    TeamAssignment   @relation(fields: [teamAssignmentId], references: [id], onDelete: Cascade)
  changedByUser     User             @relation(fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([teamAssignmentId])
  @@index([changedAt])
  @@index([changedBy])
}


// ===== BUDGET SYSTEM SCHEMA ADDITIONS =====

/// Budget Management System
model Budget {
  id                String           @id @default(uuid())
  jobId             String           @unique // One budget per job
  type              BudgetType
  amount            Decimal          @db.Decimal(10, 2)
  currency          String           @default("USD")
  estimatedHours    Int?
  notes             String?
  status            BudgetStatus     @default(DRAFT)
  
  // Audit fields
  createdBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  approvedAt        DateTime?
  approvedBy        String?
  
  // Relations
  job               Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  creator           User             @relation("BudgetCreator", fields: [createdBy], references: [id])
  approver          User?            @relation("BudgetApprover", fields: [approvedBy], references: [id])
  milestones        Milestone[]
  payments          Payment[]
  
  @@index([jobId])
  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
}

/// Milestone Management
model Milestone {
  id                String           @id @default(uuid())
  budgetId          String
  name              String
  description       String?
  amount            Decimal          @db.Decimal(10, 2)
  percentage        Decimal          @db.Decimal(5, 2) // Percentage of total budget
  status            MilestoneStatus  @default(PENDING)
  dueDate           DateTime?
  completedAt       DateTime?
  completedBy       String?
  
  // Milestone-specific fields
  deliverables      String[]         @default([])
  acceptanceCriteria String?
  notes             String?
  
  // Audit fields
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  budget            Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  completer         User?            @relation("MilestoneCompleter", fields: [completedBy], references: [id])
  payments          Payment[]
  
  @@index([budgetId])
  @@index([status])
  @@index([dueDate])
  @@index([completedAt])
}

/// Payment Processing
model Payment {
  id                String           @id @default(uuid())
  budgetId          String
  milestoneId       String?
  amount            Decimal          @db.Decimal(10, 2)
  currency          String
  paymentType       PaymentType
  status            PaymentStatus    @default(PENDING)
  
  // Payment details
  reference         String?          // External payment reference
  description       String?
  notes             String?
  
  // Processing fields
  processedAt       DateTime?
  processedBy       String?
  failureReason     String?
  
  // Audit fields
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  budget            Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  milestone         Milestone?       @relation(fields: [milestoneId], references: [id])
  processor         User?            @relation("PaymentProcessor", fields: [processedBy], references: [id])
  
  @@index([budgetId])
  @@index([milestoneId])
  @@index([status])
  @@index([paymentType])
  @@index([createdAt])
  @@index([reference])
}

/// Currency and Exchange Rate Management
model Currency {
  code              String           @id // ISO 4217 currency code (USD, EUR, etc.)
  name              String           // Full currency name
  symbol            String           // Currency symbol ($, €, etc.)
  isActive          Boolean          @default(true)
  isBase            Boolean          @default(false) // Is this the base currency (USD)
  decimalPlaces     Int              @default(2)
  
  // Metadata
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  exchangeRates     ExchangeRate[]  @relation("FromCurrency")
  exchangeRatesTo   ExchangeRate[]  @relation("ToCurrency")
  
  @@index([isActive])
  @@index([isBase])
}

/// Exchange Rate Management
model ExchangeRate {
  id                String           @id @default(uuid())
  fromCurrency      String
  toCurrency        String
  rate              Decimal          @db.Decimal(15, 6)
  effectiveDate     DateTime         @default(now())
  expiryDate        DateTime?
  source            String           @default("MANUAL") // MANUAL, API, SYSTEM
  isActive          Boolean          @default(true)
  
  // Metadata
  notes             String?
  createdBy         String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  fromCurrencyRef   Currency         @relation("FromCurrency", fields: [fromCurrency], references: [code])
  toCurrencyRef     Currency         @relation("ToCurrency", fields: [toCurrency], references: [code])
  creator           User?            @relation("ExchangeRateCreator", fields: [createdBy], references: [id])
  
  @@unique([fromCurrency, toCurrency, effectiveDate])
  @@index([fromCurrency])
  @@index([toCurrency])
  @@index([effectiveDate])
  @@index([isActive])
  @@index([source])
}

// ===== ENUMS FOR BUDGET SYSTEM =====

enum BudgetType {
  FIXED
  HOURLY
  MILESTONE
  HYBRID
}

enum BudgetStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum PaymentType {
  ADVANCE
  MILESTONE
  COMPLETION
  REFUND
  ADJUSTMENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// ===== RELATION UPDATES FOR EXISTING MODELS =====

// ===== SCORING SYSTEM SCHEMA ADDITIONS =====

enum ScoringAlgorithmType {
  DEFAULT
  LINEAR
  CUSTOM
}

model ScoringConfig {
  id                 String               @id @default(uuid())
  name               String               // Configuration name
  description        String?              // Optional description
  algorithm          ScoringAlgorithmType @default(DEFAULT)
  weights            Json                 // e.g. {"requiredSkills":0.45,"preferredSkills":0.15,"performance":0.2,"availability":0.1,"workload":0.1}
  constraints        Json?                // e.g. {"minExperience":0,"maxActiveAssignments":5}
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  // Relations
  scoringRuns        ScoringRun[]

  @@index([isActive])
}

model DeveloperPerformanceMetric {
  id                 String   @id @default(uuid())
  developerId        String
  // rolling aggregates (updated by cron or on assignment completion)
  completedCount     Int      @default(0)
  failedCount        Int      @default(0)
  cancelledCount     Int      @default(0)
  onTimeRate         Float    @default(0) // 0..1
  avgCycleTimeHours  Float    @default(0) // avg actual hours
  avgQualityRating   Float    @default(0) // 0..5 (if you later add rating)
  lastUpdatedAt      DateTime @default(now())

  developer          User     @relation(fields: [developerId], references: [id], onDelete: Cascade)

  @@unique([developerId])
  @@index([avgQualityRating, onTimeRate])
}

model ScoringRun {
  id            String   @id @default(uuid())
  jobId         String
  triggeredBy   String?  // admin/user id
  algorithm     ScoringAlgorithmType @default(DEFAULT)
  configId      String?
  createdAt     DateTime @default(now())

  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  config        ScoringConfig? @relation(fields: [configId], references: [id])
  triggeredByUser User?  @relation("UserScoringRuns", fields: [triggeredBy], references: [id])

  scores        AssignmentScore[]

  @@index([jobId, createdAt])
}

model AssignmentScore {
  id               String   @id @default(uuid())
  runId            String
  jobId            String
  developerId      String
  totalScore       Float
  breakdown        Json     // e.g. {"requiredSkills":0.36,"preferredSkills":0.12,"performance":0.18,"availability":0.08,"workload":0.06}
  rank             Int
  createdAt        DateTime @default(now())

  run              ScoringRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  job              Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  developer        User       @relation(fields: [developerId], references: [id], onDelete: Cascade)

  @@index([jobId, totalScore])
  @@index([developerId, createdAt])
  @@unique([runId, developerId])
}
