generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User and related models
model User {
  id                       String               @id @default(uuid())
  firstname                String
  middlename               String?
  lastname                 String
  username                 String               @unique
  email                    String               @unique
  password                 String
  isEmailVerified          Boolean              @default(false)
  role                     UserRole             @default(CLIENT)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  isDeleted                Boolean              @default(false)
  deletedAt                DateTime?
  lastLoginAt              DateTime?
  failedLoginAttempts      Int                  @default(0)
  twoFactorEnabled         Boolean              @default(false)
  twoFactorSecret          String?
  preferredLanguage        String?
  timezone                 String?
  accountLockedUntil       DateTime?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  passwordResetExpires     DateTime?
  passwordResetToken       String?
  twoFactorBackupCodes     String[]             @default([])
  auditLogs                AuditLog[]
  authProviders            AuthProvider[]
  profile                  Profile?
  refreshTokens            RefreshToken[]
  sessions                 Session[]
  suspiciousActivities     SuspiciousActivity[]
  loginPatterns            UserLoginPattern[]
}

model Profile {
  id                 String    @id @default(uuid())
  userId             String    @unique
  displayName        String?
  bio                String?
  profilePictureUrl  String?
  chatLastReadAt     DateTime?
  skills             String[]
  experience         Int?
  availability       Json?
  companyName        String?
  companyWebsite     String?
  adminPreferences   Json?
  companyDescription String?
  companySize        String?
  contactEmail       String?
  contactPerson      String?
  contactPhone       String?
  createdAt          DateTime  @default(now())
  currency           String?   @default("USD")
  education          Json?
  hourlyRate         Float?
  industry           String?
  lastSystemAccess   DateTime?
  location           Json?
  permissions        String[]
  projectPreferences Json?
  socialLinks        Json?
  systemRole         String?
  updatedAt          DateTime
  workPreferences    Json?
  portfolioLinks     Json?
  billingAddress     Json?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthProvider {
  id             String   @id @default(uuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  profileEmail   String?
  linkedAt       DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}